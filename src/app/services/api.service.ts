//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------


/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_AI_NEXUS_URL = new InjectionToken<string>('API_BASE_AI_NEXUS_URL');

@Injectable({
    providedIn: 'root'
})
export class ChatHistoryClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_AI_NEXUS_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "https://eekelsmvp-be.azurewebsites.net";
    }

    /**
     * @return OK
     */
    getRecentChats(userId: string): Observable<GetRecentChatsResponse> {
        let url_ = this.baseUrl + "/api/ChatHistory/get-recent-chats?";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined and cannot be null.");
        else
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRecentChats(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRecentChats(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetRecentChatsResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetRecentChatsResponse>;
        }));
    }

    protected processGetRecentChats(response: HttpResponseBase): Observable<GetRecentChatsResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRecentChatsResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional)
     * @return OK
     */
    updateChatTitle(body?: UpdateChatTitleRequest | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/ChatHistory/update-chat-title";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateChatTitle(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateChatTitle(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdateChatTitle(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    deleteChat(chatId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/ChatHistory/delete-chat/{chatId}";
        if (chatId === undefined || chatId === null)
            throw new Error("The parameter 'chatId' must be defined.");
        url_ = url_.replace("{chatId}", encodeURIComponent("" + chatId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteChat(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteChat(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteChat(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getChatMessages(chatId: string): Observable<GetChatMessagesResponse> {
        let url_ = this.baseUrl + "/api/ChatHistory/get-chat-messages?";
        if (chatId === undefined || chatId === null)
            throw new Error("The parameter 'chatId' must be defined and cannot be null.");
        else
            url_ += "chatId=" + encodeURIComponent("" + chatId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetChatMessages(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetChatMessages(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetChatMessagesResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetChatMessagesResponse>;
        }));
    }

    protected processGetChatMessages(response: HttpResponseBase): Observable<GetChatMessagesResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetChatMessagesResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class LogSourcesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_AI_NEXUS_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "https://eekelsmvp-be.azurewebsites.net";
    }

    /**
     * @return OK
     */
    connectedLogSources(): Observable<ConnectedLogSourceResponse> {
        let url_ = this.baseUrl + "/api/LogSources/connectedLogSources";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processConnectedLogSources(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processConnectedLogSources(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ConnectedLogSourceResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ConnectedLogSourceResponse>;
        }));
    }

    protected processConnectedLogSources(response: HttpResponseBase): Observable<ConnectedLogSourceResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ConnectedLogSourceResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    availableProviders(): Observable<LogSourceProvidersResponse> {
        let url_ = this.baseUrl + "/api/LogSources/available-providers";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAvailableProviders(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAvailableProviders(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<LogSourceProvidersResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<LogSourceProvidersResponse>;
        }));
    }

    protected processAvailableProviders(response: HttpResponseBase): Observable<LogSourceProvidersResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LogSourceProvidersResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional)
     * @return OK
     */
    add(body?: LogSourceRequestDto | undefined): Observable<CreateLogSourceResponse> {
        let url_ = this.baseUrl + "/api/LogSources/add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdd(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdd(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CreateLogSourceResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CreateLogSourceResponse>;
        }));
    }

    protected processAdd(response: HttpResponseBase): Observable<CreateLogSourceResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateLogSourceResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = ProblemDetails.fromJS(resultData409);
            return throwException("Conflict", status, _responseText, _headers, result409);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional)
     * @return OK
     */
    refresh(body?: LogSourceRefreshRequest | undefined): Observable<LogSourceRefreshResponse> {
        let url_ = this.baseUrl + "/api/LogSources/refresh";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRefresh(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRefresh(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<LogSourceRefreshResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<LogSourceRefreshResponse>;
        }));
    }

    protected processRefresh(response: HttpResponseBase): Observable<LogSourceRefreshResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LogSourceRefreshResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param logSourceId (optional)
     * @return OK
     */
    delete(logSourceId?: string | undefined): Observable<RemoveLogSourceResponse> {
        let url_ = this.baseUrl + "/api/LogSources/delete?";
        if (logSourceId === null)
            throw new Error("The parameter 'logSourceId' cannot be null.");
        else if (logSourceId !== undefined)
            url_ += "logSourceId=" + encodeURIComponent("" + logSourceId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RemoveLogSourceResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RemoveLogSourceResponse>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<RemoveLogSourceResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RemoveLogSourceResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class QueryClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_AI_NEXUS_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "https://eekelsmvp-be.azurewebsites.net";
    }

    /**
     * @param body (optional)
     * @return OK
     */
    aI(body?: UserQueryRequest | undefined): Observable<ApiResponse> {
        let url_ = this.baseUrl + "/api/AI";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAI(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAI(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse>;
        }));
    }

    protected processAI(response: HttpResponseBase): Observable<ApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class UserClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_AI_NEXUS_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "https://eekelsmvp-be.azurewebsites.net";
    }

    /**
     * @return OK
     */
    getUserId(email: string): Observable<GetUserIdResponse> {
        let url_ = this.baseUrl + "/api/User/get-user-id?";
        if (email === undefined || email === null)
            throw new Error("The parameter 'email' must be defined and cannot be null.");
        else
            url_ += "Email=" + encodeURIComponent("" + email) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetUserIdResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetUserIdResponse>;
        }));
    }

    protected processGetUserId(response: HttpResponseBase): Observable<GetUserIdResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetUserIdResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional)
     * @return OK
     */
    createUser(body?: EmailRequest | undefined): Observable<CreateUserResponse> {
        let url_ = this.baseUrl + "/api/User/create-user";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CreateUserResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CreateUserResponse>;
        }));
    }

    protected processCreateUser(response: HttpResponseBase): Observable<CreateUserResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateUserResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class ApiResponse implements IApiResponse {
    response?: string | undefined;
    chatId?: string | undefined;

    constructor(data?: IApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.response = _data["response"];
            this.chatId = _data["chatId"];
        }
    }

    static fromJS(data: any): ApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["response"] = this.response;
        data["chatId"] = this.chatId;
        return data;
    }
}

export interface IApiResponse {
    response?: string | undefined;
    chatId?: string | undefined;
}

export class AuthField implements IAuthField {
    key?: string | undefined;
    value?: string | undefined;

    constructor(data?: IAuthField) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): AuthField {
        data = typeof data === 'object' ? data : {};
        let result = new AuthField();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["value"] = this.value;
        return data;
    }
}

export interface IAuthField {
    key?: string | undefined;
    value?: string | undefined;
}

export class ChatSessionDto implements IChatSessionDto {
    chatId?: string;
    title?: string | undefined;
    timestamp?: Date;
    messages?: MessageDto[] | undefined;

    constructor(data?: IChatSessionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.chatId = _data["chatId"];
            this.title = _data["title"];
            this.timestamp = _data["timestamp"] ? new Date(_data["timestamp"].toString()) : <any>undefined;
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(MessageDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ChatSessionDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChatSessionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["chatId"] = this.chatId;
        data["title"] = this.title;
        data["timestamp"] = this.timestamp ? this.timestamp.toISOString() : <any>undefined;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IChatSessionDto {
    chatId?: string;
    title?: string | undefined;
    timestamp?: Date;
    messages?: MessageDto[] | undefined;
}

export class ConnectedLogSourceDto implements IConnectedLogSourceDto {
    publicId?: string;
    displayName?: string | undefined;
    status?: string | undefined;
    type?: string | undefined;
    entries?: number | undefined;
    lastSync?: string | undefined;
    baseUrl?: string | undefined;
    provider?: string | undefined;

    constructor(data?: IConnectedLogSourceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.publicId = _data["publicId"];
            this.displayName = _data["displayName"];
            this.status = _data["status"];
            this.type = _data["type"];
            this.entries = _data["entries"];
            this.lastSync = _data["lastSync"];
            this.baseUrl = _data["baseUrl"];
            this.provider = _data["provider"];
        }
    }

    static fromJS(data: any): ConnectedLogSourceDto {
        data = typeof data === 'object' ? data : {};
        let result = new ConnectedLogSourceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["publicId"] = this.publicId;
        data["displayName"] = this.displayName;
        data["status"] = this.status;
        data["type"] = this.type;
        data["entries"] = this.entries;
        data["lastSync"] = this.lastSync;
        data["baseUrl"] = this.baseUrl;
        data["provider"] = this.provider;
        return data;
    }
}

export interface IConnectedLogSourceDto {
    publicId?: string;
    displayName?: string | undefined;
    status?: string | undefined;
    type?: string | undefined;
    entries?: number | undefined;
    lastSync?: string | undefined;
    baseUrl?: string | undefined;
    provider?: string | undefined;
}

export class ConnectedLogSourceResponse implements IConnectedLogSourceResponse {
    connectedLogSources?: ConnectedLogSourceDto[] | undefined;

    constructor(data?: IConnectedLogSourceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["connectedLogSources"])) {
                this.connectedLogSources = [] as any;
                for (let item of _data["connectedLogSources"])
                    this.connectedLogSources!.push(ConnectedLogSourceDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ConnectedLogSourceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ConnectedLogSourceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.connectedLogSources)) {
            data["connectedLogSources"] = [];
            for (let item of this.connectedLogSources)
                data["connectedLogSources"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IConnectedLogSourceResponse {
    connectedLogSources?: ConnectedLogSourceDto[] | undefined;
}

export class CreateLogSourceResponse implements ICreateLogSourceResponse {
    publicId?: string;

    constructor(data?: ICreateLogSourceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.publicId = _data["publicId"];
        }
    }

    static fromJS(data: any): CreateLogSourceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CreateLogSourceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["publicId"] = this.publicId;
        return data;
    }
}

export interface ICreateLogSourceResponse {
    publicId?: string;
}

export class CreateUserResponse implements ICreateUserResponse {
    userId!: string;
    message?: string | undefined;

    constructor(data?: ICreateUserResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): CreateUserResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUserResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["message"] = this.message;
        return data;
    }
}

export interface ICreateUserResponse {
    userId: string;
    message?: string | undefined;
}

export class EmailRequest implements IEmailRequest {
    email!: string;

    constructor(data?: IEmailRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): EmailRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EmailRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        return data;
    }
}

export interface IEmailRequest {
    email: string;
}

export class GetChatMessagesResponse implements IGetChatMessagesResponse {
    messages?: MessageDto[] | undefined;

    constructor(data?: IGetChatMessagesResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(MessageDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetChatMessagesResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetChatMessagesResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IGetChatMessagesResponse {
    messages?: MessageDto[] | undefined;
}

export class GetRecentChatsResponse implements IGetRecentChatsResponse {
    chatSessions?: ChatSessionDto[] | undefined;

    constructor(data?: IGetRecentChatsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["chatSessions"])) {
                this.chatSessions = [] as any;
                for (let item of _data["chatSessions"])
                    this.chatSessions!.push(ChatSessionDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetRecentChatsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetRecentChatsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.chatSessions)) {
            data["chatSessions"] = [];
            for (let item of this.chatSessions)
                data["chatSessions"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IGetRecentChatsResponse {
    chatSessions?: ChatSessionDto[] | undefined;
}

export class GetUserIdResponse implements IGetUserIdResponse {
    userId!: string;

    constructor(data?: IGetUserIdResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): GetUserIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        return data;
    }
}

export interface IGetUserIdResponse {
    userId: string;
}

export enum LogSourceProvider {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
}

export class LogSourceProvidersDto implements ILogSourceProvidersDto {
    provider?: number;
    displayName?: string | undefined;

    constructor(data?: ILogSourceProvidersDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.provider = _data["provider"];
            this.displayName = _data["displayName"];
        }
    }

    static fromJS(data: any): LogSourceProvidersDto {
        data = typeof data === 'object' ? data : {};
        let result = new LogSourceProvidersDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["provider"] = this.provider;
        data["displayName"] = this.displayName;
        return data;
    }
}

export interface ILogSourceProvidersDto {
    provider?: number;
    displayName?: string | undefined;
}

export class LogSourceProvidersResponse implements ILogSourceProvidersResponse {
    logSourceProviders?: LogSourceProvidersDto[] | undefined;

    constructor(data?: ILogSourceProvidersResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["logSourceProviders"])) {
                this.logSourceProviders = [] as any;
                for (let item of _data["logSourceProviders"])
                    this.logSourceProviders!.push(LogSourceProvidersDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LogSourceProvidersResponse {
        data = typeof data === 'object' ? data : {};
        let result = new LogSourceProvidersResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.logSourceProviders)) {
            data["logSourceProviders"] = [];
            for (let item of this.logSourceProviders)
                data["logSourceProviders"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface ILogSourceProvidersResponse {
    logSourceProviders?: LogSourceProvidersDto[] | undefined;
}

export class LogSourceRefreshRequest implements ILogSourceRefreshRequest {
    publicId?: string;
    userTimeZone?: string | undefined;

    constructor(data?: ILogSourceRefreshRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.publicId = _data["publicId"];
            this.userTimeZone = _data["userTimeZone"];
        }
    }

    static fromJS(data: any): LogSourceRefreshRequest {
        data = typeof data === 'object' ? data : {};
        let result = new LogSourceRefreshRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["publicId"] = this.publicId;
        data["userTimeZone"] = this.userTimeZone;
        return data;
    }
}

export interface ILogSourceRefreshRequest {
    publicId?: string;
    userTimeZone?: string | undefined;
}

export class LogSourceRefreshResponse implements ILogSourceRefreshResponse {
    publicId?: string;
    lastSync?: Date | undefined;
    entries?: number | undefined;
    status?: string | undefined;
    message?: string | undefined;

    constructor(data?: ILogSourceRefreshResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.publicId = _data["publicId"];
            this.lastSync = _data["lastSync"] ? new Date(_data["lastSync"].toString()) : <any>undefined;
            this.entries = _data["entries"];
            this.status = _data["status"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): LogSourceRefreshResponse {
        data = typeof data === 'object' ? data : {};
        let result = new LogSourceRefreshResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["publicId"] = this.publicId;
        data["lastSync"] = this.lastSync ? this.lastSync.toISOString() : <any>undefined;
        data["entries"] = this.entries;
        data["status"] = this.status;
        data["message"] = this.message;
        return data;
    }
}

export interface ILogSourceRefreshResponse {
    publicId?: string;
    lastSync?: Date | undefined;
    entries?: number | undefined;
    status?: string | undefined;
    message?: string | undefined;
}

export class LogSourceRequestDto implements ILogSourceRequestDto {
    displayName?: string | undefined;
    provider?: LogSourceProvider;
    type?: LogsType;
    userTimeZone?: string | undefined;
    baseUrl!: string | undefined;
    auth?: AuthField[] | undefined;

    constructor(data?: ILogSourceRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.displayName = _data["displayName"];
            this.provider = _data["provider"];
            this.type = _data["type"];
            this.userTimeZone = _data["userTimeZone"];
            this.baseUrl = _data["baseUrl"];
            if (Array.isArray(_data["auth"])) {
                this.auth = [] as any;
                for (let item of _data["auth"])
                    this.auth!.push(AuthField.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LogSourceRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new LogSourceRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["provider"] = this.provider;
        data["type"] = this.type;
        data["userTimeZone"] = this.userTimeZone;
        data["baseUrl"] = this.baseUrl;
        if (Array.isArray(this.auth)) {
            data["auth"] = [];
            for (let item of this.auth)
                data["auth"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface ILogSourceRequestDto {
    displayName?: string | undefined;
    provider?: LogSourceProvider;
    type?: LogsType;
    userTimeZone?: string | undefined;
    baseUrl: string | undefined;
    auth?: AuthField[] | undefined;
}

export enum LogsType {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
}

export class MessageDto implements IMessageDto {
    messageId?: string;
    prompt!: string | undefined;
    response?: string | undefined;
    timestamp?: Date;

    constructor(data?: IMessageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.messageId = _data["messageId"];
            this.prompt = _data["prompt"];
            this.response = _data["response"];
            this.timestamp = _data["timestamp"] ? new Date(_data["timestamp"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): MessageDto {
        data = typeof data === 'object' ? data : {};
        let result = new MessageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["messageId"] = this.messageId;
        data["prompt"] = this.prompt;
        data["response"] = this.response;
        data["timestamp"] = this.timestamp ? this.timestamp.toISOString() : <any>undefined;
        return data;
    }
}

export interface IMessageDto {
    messageId?: string;
    prompt: string | undefined;
    response?: string | undefined;
    timestamp?: Date;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

export class RemoveLogSourceResponse implements IRemoveLogSourceResponse {
    message?: string | undefined;

    constructor(data?: IRemoveLogSourceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): RemoveLogSourceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveLogSourceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        return data;
    }
}

export interface IRemoveLogSourceResponse {
    message?: string | undefined;
}

export class UpdateChatTitleRequest implements IUpdateChatTitleRequest {
    chatId!: string;
    newTitle!: string | undefined;

    constructor(data?: IUpdateChatTitleRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.chatId = _data["chatId"];
            this.newTitle = _data["newTitle"];
        }
    }

    static fromJS(data: any): UpdateChatTitleRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateChatTitleRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["chatId"] = this.chatId;
        data["newTitle"] = this.newTitle;
        return data;
    }
}

export interface IUpdateChatTitleRequest {
    chatId: string;
    newTitle: string | undefined;
}

export class UserQueryRequest implements IUserQueryRequest {
    userId!: string;
    chatId?: string | undefined;
    prompt!: string;
    userTimeZone!: string;

    constructor(data?: IUserQueryRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.chatId = _data["chatId"];
            this.prompt = _data["prompt"];
            this.userTimeZone = _data["userTimeZone"];
        }
    }

    static fromJS(data: any): UserQueryRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UserQueryRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["chatId"] = this.chatId;
        data["prompt"] = this.prompt;
        data["userTimeZone"] = this.userTimeZone;
        return data;
    }
}

export interface IUserQueryRequest {
    userId: string;
    chatId?: string | undefined;
    prompt: string;
    userTimeZone: string;
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}
